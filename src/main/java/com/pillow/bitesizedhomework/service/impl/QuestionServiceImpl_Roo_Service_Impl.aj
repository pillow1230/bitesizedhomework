// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.service.impl;

import com.pillow.bitesizedhomework.model.Homework;
import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.repository.QuestionRepository;
import com.pillow.bitesizedhomework.service.api.HomeworkService;
import com.pillow.bitesizedhomework.service.impl.QuestionServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect QuestionServiceImpl_Roo_Service_Impl {
    
    declare @type: QuestionServiceImpl: @Service;
    
    declare @type: QuestionServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private QuestionRepository QuestionServiceImpl.questionRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
//    private HomeworkService QuestionServiceImpl.homeworkService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param questionRepository
     * @param homeworkService
     */
    @Autowired
    public QuestionServiceImpl.new(QuestionRepository questionRepository
//    		, @Lazy HomeworkService homeworkService
    		) {
        setQuestionRepository(questionRepository);
//        setHomeworkService(homeworkService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return QuestionRepository
     */
    public QuestionRepository QuestionServiceImpl.getQuestionRepository() {
        return questionRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param questionRepository
     */
    public void QuestionServiceImpl.setQuestionRepository(QuestionRepository questionRepository) {
        this.questionRepository = questionRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return HomeworkService
     */
//    public HomeworkService QuestionServiceImpl.getHomeworkService() {
//        return homeworkService;
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homeworkService
     */
//    public void QuestionServiceImpl.setHomeworkService(HomeworkService homeworkService) {
//        this.homeworkService = homeworkService;
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @return Map
     */
    public Map<String, List<MessageI18n>> QuestionServiceImpl.validate(Question question) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToAdd
     * @return Question
     */
//    @Transactional
//    public Question QuestionServiceImpl.addToHomeworks(Question question, Iterable<Long> homeworksToAdd) {
//        List<Homework> homeworks = getHomeworkService().findAll(homeworksToAdd);
//        question.addToHomeworks(homeworks);
//        return getQuestionRepository().save(question);
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToRemove
     * @return Question
     */
//    @Transactional
//    public Question QuestionServiceImpl.removeFromHomeworks(Question question, Iterable<Long> homeworksToRemove) {
//        List<Homework> homeworks = getHomeworkService().findAll(homeworksToRemove);
//        question.removeFromHomeworks(homeworks);
//        return getQuestionRepository().save(question);
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworks
     * @return Question
     */
//    @Transactional
//    public Question QuestionServiceImpl.setHomeworks(Question question, Iterable<Long> homeworks) {
//        List<Homework> items = getHomeworkService().findAll(homeworks);
//        Set<Homework> currents = question.getHomeworks();
//        Set<Homework> toRemove = new HashSet<Homework>();
//        for (Iterator<Homework> iterator = currents.iterator(); iterator.hasNext();) {
//            Homework nextHomework = iterator.next();
//            if (items.contains(nextHomework)) {
//                items.remove(nextHomework);
//            } else {
//                toRemove.add(nextHomework);
//            }
//        }
//        question.removeFromHomeworks(toRemove);
//        question.addToHomeworks(items);
//        // Force the version update of the parent side to know that the parent has changed
//        // because it has new books assigned
//        question.setVersion(question.getVersion() + 1);
//        return getQuestionRepository().save(question);
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     */
    @Transactional
    public void QuestionServiceImpl.delete(Question question) {
        // Clear bidirectional many-to-one child relationship with Homework
//        if (question.getHomework() != null) {
//            question.getHomework().getQuestions().remove(question);
//        }
        
        // Clear bidirectional one-to-many parent relationship with Homework
//        for (Homework item : question.getHomeworks()) {
//            item.setQuestion(null);
//        }
        
        getQuestionRepository().delete(question);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Question> QuestionServiceImpl.save(Iterable<Question> entities) {
        return getQuestionRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void QuestionServiceImpl.delete(Iterable<Long> ids) {
        List<Question> toDelete = getQuestionRepository().findAll(ids);
        getQuestionRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Question
     */
    @Transactional
    public Question QuestionServiceImpl.save(Question entity) {
        return getQuestionRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Question
     */
    public Question QuestionServiceImpl.findOne(Long id) {
        return getQuestionRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Question
     */
    public Question QuestionServiceImpl.findOneForUpdate(Long id) {
        return getQuestionRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Question> QuestionServiceImpl.findAll(Iterable<Long> ids) {
        return getQuestionRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Question> QuestionServiceImpl.findAll() {
        return getQuestionRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long QuestionServiceImpl.count() {
        return getQuestionRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getQuestionRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getQuestionRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionServiceImpl.findByHomework(Homework homework, GlobalSearch globalSearch, Pageable pageable) {
        return getQuestionRepository().findByHomework(homework, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @return Long
     */
//    public long QuestionServiceImpl.countByHomework(Homework homework) {
//        return getQuestionRepository().countByHomework(homework);
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Question> QuestionServiceImpl.getEntityType() {
        return Question.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> QuestionServiceImpl.getIdType() {
        return Long.class;
    }
    
}
