// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.service.impl;

import com.pillow.bitesizedhomework.model.EClass;
import com.pillow.bitesizedhomework.model.Homework;
import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.repository.HomeworkRepository;
import com.pillow.bitesizedhomework.service.api.QuestionService;
import com.pillow.bitesizedhomework.service.impl.HomeworkServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect HomeworkServiceImpl_Roo_Service_Impl {
    
    declare @type: HomeworkServiceImpl: @Service;
    
    declare @type: HomeworkServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private HomeworkRepository HomeworkServiceImpl.homeworkRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private QuestionService HomeworkServiceImpl.questionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param homeworkRepository
     * @param questionService
     */
    @Autowired
    public HomeworkServiceImpl.new(HomeworkRepository homeworkRepository, @Lazy QuestionService questionService) {
        setHomeworkRepository(homeworkRepository);
        setQuestionService(questionService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return HomeworkRepository
     */
    public HomeworkRepository HomeworkServiceImpl.getHomeworkRepository() {
        return homeworkRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homeworkRepository
     */
    public void HomeworkServiceImpl.setHomeworkRepository(HomeworkRepository homeworkRepository) {
        this.homeworkRepository = homeworkRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return QuestionService
     */
    public QuestionService HomeworkServiceImpl.getQuestionService() {
        return questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param questionService
     */
    public void HomeworkServiceImpl.setQuestionService(QuestionService questionService) {
        this.questionService = questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @return Map
     */
    public Map<String, List<MessageI18n>> HomeworkServiceImpl.validate(Homework homework) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @param questionsToAdd
     * @return Homework
     */
    @Transactional
    public Homework HomeworkServiceImpl.addToQuestions(Homework homework, Iterable<Long> questionsToAdd) {
        List<Question> questions = getQuestionService().findAll(questionsToAdd);
        homework.addToQuestions(questions);
        return getHomeworkRepository().save(homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @param questionsToRemove
     * @return Homework
     */
    @Transactional
    public Homework HomeworkServiceImpl.removeFromQuestions(Homework homework, Iterable<Long> questionsToRemove) {
        List<Question> questions = getQuestionService().findAll(questionsToRemove);
        homework.removeFromQuestions(questions);
        return getHomeworkRepository().save(homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @param questions
     * @return Homework
     */
    @Transactional
    public Homework HomeworkServiceImpl.setQuestions(Homework homework, Iterable<Long> questions) {
        List<Question> items = getQuestionService().findAll(questions);
        Set<Question> currents = homework.getQuestions();
        Set<Question> toRemove = new HashSet<Question>();
        for (Iterator<Question> iterator = currents.iterator(); iterator.hasNext();) {
            Question nextQuestion = iterator.next();
            if (items.contains(nextQuestion)) {
                items.remove(nextQuestion);
            } else {
                toRemove.add(nextQuestion);
            }
        }
        homework.removeFromQuestions(toRemove);
        homework.addToQuestions(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        homework.setVersion(homework.getVersion() + 1);
        return getHomeworkRepository().save(homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     */
    @Transactional
    public void HomeworkServiceImpl.delete(Homework homework) {
        // Clear bidirectional many-to-one child relationship with Question
//        if (homework.getQuestion() != null) {
//            homework.getQuestion().getHomeworks().remove(homework);
//        }
        
        // Clear bidirectional many-to-one child relationship with EClass
        if (homework.getEclass() != null) {
            homework.getEclass().getHomeworks().remove(homework);
        }
        
        // Clear bidirectional one-to-many parent relationship with Question
//        for (Question item : homework.getQuestions()) {
//            item.setHomework(null);
//        }
        
        getHomeworkRepository().delete(homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Homework> HomeworkServiceImpl.save(Iterable<Homework> entities) {
        return getHomeworkRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void HomeworkServiceImpl.delete(Iterable<Long> ids) {
        List<Homework> toDelete = getHomeworkRepository().findAll(ids);
        getHomeworkRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Homework
     */
    @Transactional
    public Homework HomeworkServiceImpl.save(Homework entity) {
        return getHomeworkRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Homework
     */
    public Homework HomeworkServiceImpl.findOne(Long id) {
        return getHomeworkRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Homework
     */
    public Homework HomeworkServiceImpl.findOneForUpdate(Long id) {
        return getHomeworkRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Homework> HomeworkServiceImpl.findAll(Iterable<Long> ids) {
        return getHomeworkRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Homework> HomeworkServiceImpl.findAll() {
        return getHomeworkRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long HomeworkServiceImpl.count() {
        return getHomeworkRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getHomeworkRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getHomeworkRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param eclass
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkServiceImpl.findByEclass(EClass eclass, GlobalSearch globalSearch, Pageable pageable) {
        return getHomeworkRepository().findByEclass(eclass, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkServiceImpl.findByQuestion(Question question, GlobalSearch globalSearch, Pageable pageable) {
        return getHomeworkRepository().findByQuestion(question, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param eclass
     * @return Long
     */
    public long HomeworkServiceImpl.countByEclass(EClass eclass) {
        return getHomeworkRepository().countByEclass(eclass);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @return Long
     */
//    public long HomeworkServiceImpl.countByQuestion(Question question) {
//        return getHomeworkRepository().countByQuestion(question);
//    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Homework> HomeworkServiceImpl.getEntityType() {
        return Homework.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> HomeworkServiceImpl.getIdType() {
        return Long.class;
    }
    
}
