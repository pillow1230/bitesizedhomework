// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.repository;

import com.pillow.bitesizedhomework.model.Homework;
import com.pillow.bitesizedhomework.model.QQuestion;
import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.repository.QuestionRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect QuestionRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: QuestionRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.TIME_COMPLETION = "timeCompletion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.MARK = "mark";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.TEACHER_ANSWER = "teacherAnswer";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.STUDENT_ANSWER = "studentAnswer";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.QUESTION_TYPE = "questionType";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String QuestionRepositoryImpl.HOMEWORK = "homework";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QQuestion question = QQuestion.question;
        
        JPQLQuery<Question> query = from(question);
        
        Path<?>[] paths = new Path<?>[] {question.timeCompletion,question.mark,question.teacherAnswer,question.studentAnswer,question.questionType
//        	,question.homework
        	};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIME_COMPLETION, question.timeCompletion)
			.map(MARK, question.mark)
			.map(TEACHER_ANSWER, question.teacherAnswer)
			.map(STUDENT_ANSWER, question.studentAnswer)
			.map(QUESTION_TYPE, question.questionType)
//			.map(HOMEWORK, question.homework)
			;
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, question);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QQuestion question = QQuestion.question;
        
        JPQLQuery<Question> query = from(question);
        
        Path<?>[] paths = new Path<?>[] {question.timeCompletion,question.mark,question.teacherAnswer,question.studentAnswer,question.questionType,
//        	question.homework
        	};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(question.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIME_COMPLETION, question.timeCompletion)
			.map(MARK, question.mark)
			.map(TEACHER_ANSWER, question.teacherAnswer)
			.map(STUDENT_ANSWER, question.studentAnswer)
			.map(QUESTION_TYPE, question.questionType)
//			.map(HOMEWORK, question.homework)
			;
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, question);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homework
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Question> QuestionRepositoryImpl.findByHomework(Homework homework, GlobalSearch globalSearch, Pageable pageable) {
        
        QQuestion question = QQuestion.question;
        
        JPQLQuery<Question> query = from(question);
        
        Assert.notNull(homework, "homework is required");
        
//        query.where(question.homework.eq(homework));
        Path<?>[] paths = new Path<?>[] {question.timeCompletion,question.mark,question.teacherAnswer,question.studentAnswer,question.questionType
//        	,question.homework
        	};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIME_COMPLETION, question.timeCompletion)
			.map(MARK, question.mark)
			.map(TEACHER_ANSWER, question.teacherAnswer)
			.map(STUDENT_ANSWER, question.studentAnswer)
			.map(QUESTION_TYPE, question.questionType)
//			.map(HOMEWORK, question.homework)
			;
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, question);
    }
    
}
