// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.repository;

import com.pillow.bitesizedhomework.model.EClass;
import com.pillow.bitesizedhomework.model.Homework;
import com.pillow.bitesizedhomework.model.QHomework;
import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.repository.HomeworkRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect HomeworkRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: HomeworkRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String HomeworkRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String HomeworkRepositoryImpl.LEVEL = "level";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String HomeworkRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String HomeworkRepositoryImpl.QUESTION = "question";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String HomeworkRepositoryImpl.ECLASS = "eclass";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QHomework homework = QHomework.homework;
        
        JPQLQuery<Homework> query = from(homework);
        
        Path<?>[] paths = new Path<?>[] {homework.description,homework.level,homework.name
//        	,homework.question
        	,homework.eclass};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, homework.description)
			.map(LEVEL, homework.level)
			.map(NAME, homework.name)
//			.map(QUESTION, homework.question)
			.map(ECLASS, homework.eclass);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QHomework homework = QHomework.homework;
        
        JPQLQuery<Homework> query = from(homework);
        
        Path<?>[] paths = new Path<?>[] {homework.description,homework.level,homework.name,
//        	homework.question,
        	homework.eclass};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(homework.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, homework.description)
			.map(LEVEL, homework.level)
			.map(NAME, homework.name)
//			.map(QUESTION, homework.question)
			.map(ECLASS, homework.eclass);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param eclass
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkRepositoryImpl.findByEclass(EClass eclass, GlobalSearch globalSearch, Pageable pageable) {
        
        QHomework homework = QHomework.homework;
        
        JPQLQuery<Homework> query = from(homework);
        
        Assert.notNull(eclass, "eclass is required");
        
        query.where(homework.eclass.eq(eclass));
        Path<?>[] paths = new Path<?>[] {homework.description,homework.level,homework.name,
//        	homework.question,
        	homework.eclass};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, homework.description)
			.map(LEVEL, homework.level)
			.map(NAME, homework.name)
//			.map(QUESTION, homework.question)
			.map(ECLASS, homework.eclass);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, homework);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Homework> HomeworkRepositoryImpl.findByQuestion(Question question, GlobalSearch globalSearch, Pageable pageable) {
        
        QHomework homework = QHomework.homework;
        
        JPQLQuery<Homework> query = from(homework);
        
        Assert.notNull(question, "question is required");
        
//        query.where(homework.question.eq(question));
        Path<?>[] paths = new Path<?>[] {homework.description,homework.level,homework.name,
//        	homework.question,
        	homework.eclass};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPTION, homework.description)
			.map(LEVEL, homework.level)
			.map(NAME, homework.name)
//			.map(QUESTION, homework.question)
			.map(ECLASS, homework.eclass);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, homework);
    }
    
}
