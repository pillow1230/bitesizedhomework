// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.web;

import com.pillow.bitesizedhomework.model.Homework;
import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.service.api.HomeworkService;
import com.pillow.bitesizedhomework.service.api.QuestionService;
import com.pillow.bitesizedhomework.web.QuestionsItemHomeworksJsonController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.web.NotFoundException;
import java.util.Collections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

privileged aspect QuestionsItemHomeworksJsonController_Roo_JSON {
    
    declare @type: QuestionsItemHomeworksJsonController: @RestController;
    
    declare @type: QuestionsItemHomeworksJsonController: @RequestMapping(value = "/questions/{question}/homeworks", name = "QuestionsItemHomeworksJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private QuestionService QuestionsItemHomeworksJsonController.questionService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private HomeworkService QuestionsItemHomeworksJsonController.homeworkService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param questionService
     * @param homeworkService
     */
    @Autowired
    public QuestionsItemHomeworksJsonController.new(QuestionService questionService, HomeworkService homeworkService) {
        this.questionService = questionService;
        this.homeworkService = homeworkService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return QuestionService
     */
    public QuestionService QuestionsItemHomeworksJsonController.getQuestionService() {
        return questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param questionService
     */
    public void QuestionsItemHomeworksJsonController.setQuestionService(QuestionService questionService) {
        this.questionService = questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return HomeworkService
     */
    public HomeworkService QuestionsItemHomeworksJsonController.getHomeworkService() {
        return homeworkService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param homeworkService
     */
    public void QuestionsItemHomeworksJsonController.setHomeworkService(HomeworkService homeworkService) {
        this.homeworkService = homeworkService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Question
     */
    @ModelAttribute
    public Question QuestionsItemHomeworksJsonController.getQuestion(@PathVariable("question") Long id) {
        Question question = questionService.findOne(id);
        if (question == null) {
            throw new NotFoundException(String.format("Question with identifier '%s' not found",id));
        }
        return question;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param globalSearch
     * @param pageable
     * @return ResponseEntity
     */
    @GetMapping(name = "listHomeworks")
    public ResponseEntity<Page<Homework>> QuestionsItemHomeworksJsonController.listHomeworks(@ModelAttribute Question question, GlobalSearch globalSearch, Pageable pageable) {
        
        Page<Homework> homeworks = getHomeworkService().findByQuestion(question, globalSearch, pageable);
        return ResponseEntity.ok(homeworks);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToHomeworks")
    public ResponseEntity<?> QuestionsItemHomeworksJsonController.addToHomeworks(@ModelAttribute Question question, @PathVariable("homeworksToAdd") Long homeworksToAdd) {
//        getQuestionService().addToHomeworks(question,Collections.singleton(homeworksToAdd));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToAdd
     * @return ResponseEntity
     */
    @PostMapping(name = "addToHomeworksBatch", value = "/batch")
    public ResponseEntity<?> QuestionsItemHomeworksJsonController.addToHomeworksBatch(@ModelAttribute Question question, @RequestBody Iterable<Long> homeworksToAdd) {
//        getQuestionService().addToHomeworks(question,homeworksToAdd);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromHomeworks")
    public ResponseEntity<?> QuestionsItemHomeworksJsonController.removeFromHomeworks(@ModelAttribute Question question, @PathVariable("homeworksToRemove") Long homeworksToRemove) {
//        getQuestionService().removeFromHomeworks(question,Collections.singleton(homeworksToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @param homeworksToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromHomeworksBatch", value = "/batch")
    public ResponseEntity<?> QuestionsItemHomeworksJsonController.removeFromHomeworksBatch(@ModelAttribute Question question, @RequestBody Iterable<Long> homeworksToRemove) {
//        getQuestionService().removeFromHomeworks(question,homeworksToRemove);
        return ResponseEntity.ok().build();
    }
    
}
