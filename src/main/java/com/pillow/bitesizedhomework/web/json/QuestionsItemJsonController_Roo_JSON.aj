// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.pillow.bitesizedhomework.web.json;

import com.pillow.bitesizedhomework.model.Question;
import com.pillow.bitesizedhomework.service.api.QuestionService;
import com.pillow.bitesizedhomework.web.json.QuestionsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect QuestionsItemJsonController_Roo_JSON {
    
    declare @type: QuestionsItemJsonController: @RestController;
    
    declare @type: QuestionsItemJsonController: @RequestMapping(value = "/questions/{question}", name = "QuestionsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private QuestionService QuestionsItemJsonController.questionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param questionService
     */
    @Autowired
    public QuestionsItemJsonController.new(QuestionService questionService) {
        this.questionService = questionService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return QuestionService
     */
    public QuestionService QuestionsItemJsonController.getQuestionService() {
        return questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param questionService
     */
    public void QuestionsItemJsonController.setQuestionService(QuestionService questionService) {
        this.questionService = questionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Question
     */
    @ModelAttribute
    public Question QuestionsItemJsonController.getQuestion(@PathVariable("question") Long id) {
        Question question = questionService.findOne(id);
        if (question == null) {
            throw new NotFoundException(String.format("Question with identifier '%s' not found",id));
        }
        return question;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> QuestionsItemJsonController.show(@ModelAttribute Question question) {
        return ResponseEntity.ok(question);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @return UriComponents
     */
    public static UriComponents QuestionsItemJsonController.showURI(Question question) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(QuestionsItemJsonController.class).show(question))
            .buildAndExpand(question.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedQuestion
     * @param question
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> QuestionsItemJsonController.update(@ModelAttribute Question storedQuestion, @Valid @RequestBody Question question, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        question.setId(storedQuestion.getId());
        getQuestionService().save(question);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param question
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> QuestionsItemJsonController.delete(@ModelAttribute Question question) {
        getQuestionService().delete(question);
        return ResponseEntity.ok().build();
    }
    
}
